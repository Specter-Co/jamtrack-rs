from typing import Optional, Tuple, List

class PyRect:
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, value: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, value: float) -> None: ...
    @property
    def width(self) -> float: ...
    @width.setter
    def width(self, value: float) -> None: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> None: ...
    def area(self) -> float: ...
    def __init__(self, x: float, y: float, width: float, height: float) -> None: ...

class Object:
    @property
    def detection_id(self) -> int: ...
    @property
    def prob(self) -> float: ...
    @property
    def rect(self) -> PyRect: ...
    @property
    def track_id(self) -> Optional[int]: ...
    @property
    def track_vel_xy(self) -> Optional[Tuple[float, float]]: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    def __init__(
        self,
        detection_id: int,
        rect: PyRect,
        prob: float,
        track_id: Optional[int] = None,
        track_vel_xy: Optional[Tuple[float, float]] = None
    ) -> None: ...

class ByteTracker:
    def __init__(
        self,
        frame_rate: int,
        track_buffer: int,
        track_thresh: float,
        high_thresh: float,
        match_thresh: float,
        low_conf_track_thresh: float,
        kalman_std_weight_pos: float,
        kalman_std_weight_vel: float,
        kalman_std_weight_position_meas: float,
        kalman_std_weight_position_mot: float,
        kalman_std_weight_velocity_mot: float,
        kalman_std_aspect_ratio: float,
        kalman_std_d_aspect_ratio: float,
        kalman_std_aspect_ratio_meas: float,
    ) -> None: ...
    def update(self, objects: List[Object]) -> List[Object]: ...
    def get_lost_tracks(self) -> List[Object]: ...